package com.productservice.service.Impl;import com.productservice.dto.integrations.InfoBipSendSmsDestinationRequest;import com.productservice.dto.integrations.InfoBipSendSmsMessageRequest;import com.productservice.dto.integrations.InfoBipSendSmsRequest;import com.productservice.events.EmailNotificationEvent;import com.productservice.events.SmsNotificationEvent;import com.productservice.persistence.entity.MailModel;import com.productservice.service.InfoBipIntegration;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.event.EventListener;import org.springframework.scheduling.annotation.Async;import org.springframework.stereotype.Service;import java.util.Collections;import java.util.HashMap;import java.util.Map;@Slf4j@Service@RequiredArgsConstructorpublic class NotificationService {    private final EmailSenderService emailService;    @Autowired    private final InfoBipIntegration infoBip;    @Value("${spring.mail.sender}")    String emailFrom;    @Async    @EventListener(condition = "#event.type eq 'welcome'")    public void sendNewUserNotificationEmail(EmailNotificationEvent event) {        Map<String, String> mailInfo = event.getMessage();        MailModel model = new MailModel();        model.setFrom(emailFrom);        model.setSubject("Welcome to Hi'Bees");        model.setUseTemplate(true);        model.setTemplateName("ethnocopiaWelcome.ftl");        model.setTo(new String[]{mailInfo.get("recipient")});        Map<String, String> mailMap = new HashMap<>();        mailMap.put("name", StringUtils.capitalize(mailInfo.get("name")));        mailMap.put("url", StringUtils.capitalize(mailInfo.get("url")));        model.setMessageMap(mailMap);        emailService.sendEmail(model);    }    @Async    @EventListener(condition = "#event.type eq 'welcome-admin'")    public void sendNewAdminUserNotificationEmail(EmailNotificationEvent event) {        Map<String, String> mailInfo = event.getMessage();        MailModel model = new MailModel();        model.setFrom(emailFrom);        model.setSubject("Welcome to Hi'Bees");        model.setUseTemplate(true);        model.setTemplateName("ethnocopiaWelcomeAdmin.ftl");        model.setTo(new String[]{mailInfo.get("recipient")});        Map<String, String> mailMap = new HashMap<>();        mailMap.put("name", StringUtils.capitalize(mailInfo.get("name")));        mailMap.put("username", StringUtils.capitalize(mailInfo.get("username")));        mailMap.put("cypher", StringUtils.capitalize(mailInfo.get("cypher")));        model.setMessageMap(mailMap);        emailService.sendEmail(model);    }    @Async    @EventListener()    public void smsNotificationHandler(SmsNotificationEvent event) {        infoBip.sendSms(InfoBipSendSmsRequest.builder()                .messages(Collections.singletonList(InfoBipSendSmsMessageRequest.builder()                        .destinations(Collections.singletonList(InfoBipSendSmsDestinationRequest.builder().to(event.getMessage().get("recipient")).build()))                        .text(event.getMessage().get("message"))                        .build()                ))                .build());    }}